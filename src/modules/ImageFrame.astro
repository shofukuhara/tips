---
import type { ImageMetadata } from 'astro';
import { getImage } from 'astro:assets';

//
type Props = {
  srcPaths: [string, string?];
  mediaQuery?: number;
  classNames?: string;
  alt?: string;
  loading?: 'lazy' | 'eager';
  format?: 'webp' | 'avif';
};

const {
  srcPaths,
  mediaQuery = 767,
  classNames,
  alt = '',
  loading = 'lazy',
  format = 'webp',
} = Astro.props;

const importImage = async (src: string) => {
  const imageFile = import.meta.glob<{ default: ImageMetadata }>(
    '/src/assets/**/*'
  );

  if (!imageFile[`/src/assets/${src}`]) return;
  const moduleImage = await imageFile[`/src/assets/${src}`]();

  const { default: imageSrc } = moduleImage;
  const image = await getImage({ src: imageSrc, format: format });
  const { loading: loadingMode, ...attributes } = image.attributes;
  return { src: image.src, attributes };
};

const importImages = async () => {
  return Promise.all(
    srcPaths.map(async (src) => {
      if (!src) return;
      return importImage(src);
    })
  );
};

const images = await importImages();
---

{
  (
    <>
      {images.length === 1 ? (
        <img
          src={images[0]?.src}
          {...images[0]?.attributes}
          loading={loading}
          alt={alt}
          class:list={[classNames]}
        />
      ) : (
        <picture class:list={[classNames]}>
          <source
            media={`(max-width: ${mediaQuery}px)`}
            srcset={images[0]?.src}
          />
          <img
            src={images[1]?.src}
            {...images[1]?.attributes}
            loading={loading}
            alt={alt}
            class="i"
          />
        </picture>
      )}
    </>
  )
}
